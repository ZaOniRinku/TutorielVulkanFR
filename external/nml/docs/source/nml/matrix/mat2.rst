mat2
====

Header file: ``include/mat2.h``

**mat2** is a **column-major** matrix with **2 columns** and **2 rows**.

:math:`mat2 = \begin{bmatrix} x.x & y.x \\ x.y & y.y \end{bmatrix}`

Class variables
---------------

.. table::
	:width: 100%
	:widths: 15 15 70
	:class: code-table

	+-------------------------------------+-------+----------------------------------+
	| Type                                | Name  | Description                      |
	+=====================================+=======+==================================+
	| :doc:`nml::vec2 </nml/vector/vec2>` | x     | The first column of the *mat2*.  |
	+-------------------------------------+-------+----------------------------------+
	| :doc:`nml::vec2 </nml/vector/vec2>` | y     | The second column of the *mat2*. |
	+-------------------------------------+-------+----------------------------------+

Class functions
---------------

Constructors
~~~~~~~~~~~~

.. table::
	:width: 100%
	:widths: 30 70
	:class: code-table

	+----------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------+
	| Name                                                                                                           | Description                                                                  |
	+================================================================================================================+==============================================================================+
	| :doc:`mat2() </nml/matrix/mat2/constructor>`                                                                   | Construct a ([1.0, 0.0], [0.0, 1.0]) identity matrix.                        |
	+----------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------+
	| :doc:`mat2(float _xxxyyxyy) </nml/matrix/mat2/constructor_float>`                                              | Construct a ([*_xxxyyxyy*, *_xxxyyxyy*], [*_xxxyyxyy*, *_xxxyyxyy*]) matrix. |
	+----------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------+
	| :doc:`mat2(float _xx, float _xy, float _yx, float _yy) </nml/matrix/mat2/constructor_float_float_float_float>` | Construct a ([*_xx*, *_xy*], [*_yx*, *_yy*]) matrix.                         |
	+----------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------+
	| :doc:`mat2(float _xx, float _xy, nlm::vec2 _yxyy) </nml/matrix/mat2/constructor_float_float_vec2>`             | Construct a ([*_xx*, *_xy*], [*_yxyy.x*, *_yxyy.y*]) matrix.                 |
	+----------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------+
	| :doc:`mat2(nlm::vec2 _xxxy, float _yx, float _yy) </nml/matrix/mat2/constructor_vec2_float_float>`             | Construct a ([*_xxxy.x*, *_xxxy.y*], [*_yx*, *_yy*]) matrix.                 |
	+----------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------+
	| :doc:`mat2(nlm::vec2 _xxxy, nlm::vec2 _yxyy) </nml/matrix/mat2/constructor_float_float_float_float>`           | Construct a ([*_xxxy.x*, *_xxxy.y*], [*_yxyy.x*, *_yxyy.y*]) matrix.         |
	+----------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------+

Operators
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 50 50
	:class: code-table

	+----------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
	| Name                                                                                               | Description                                                                                                        |
	+====================================================================================================+====================================================================================================================+
	| :doc:`nml::mat2& operator+=(const nml::mat2& other) </nml/matrix/mat2/operator_plus_equal_mat2>`   | Add a *mat2* to the current *mat2*.                                                                                |
	+----------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::mat2& operator-=(const nml::mat2& other) </nml/matrix/mat2/operator_minus_equal_mat2>`  | Substract a *mat2* from the current *mat2*.                                                                        |
	+----------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::mat2& operator*=(const nlm::mat2& other) </nml/matrix/mat2/operator_times_equal_mat2>`  | Multiply the current *mat2* by a *mat2*.                                                                           |
	+----------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::mat2& operator*=(const float other) </nml/matrix/mat2/operator_times_equal_float>`      | Multiply the current *mat2* by a scalar.                                                                           |
	+----------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::mat2& operator/=(const float other) </nml/matrix/mat2/operator_divide_equal_float>`     | Divide the current *mat2* by a scalar.                                                                             |
	+----------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
	| :doc:`nlm::vec2& operator[](size_t index) </nml/matrix/mat2/operator_brackets_ref>`                | Return a reference to *x* if index is 0 or a reference to *y* if index is 1, else, throw an exception.             |
	+----------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
	| :doc:`const nlm::vec2& operator[](size_t index) const </nml/matrix/mat2/operator_brackets_value>`  | Return a const reference to *x* if index is 0 or a const reference to *y* if index is 1, else, throw an exception. |
	+----------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+

Functions
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 30 70
	:class: code-table

	+-------------------------------------------------+--------------------------------------------+
	| Name                                            | Description                                |
	+=================================================+============================================+
	| :doc:`float det() const </nml/matrix/mat2/det>` | Return the determinant of the matrix.      |
	+-------------------------------------------------+--------------------------------------------+
	| :doc:`float* data() </nml/matrix/mat2/data>`    | Return a pointer to the matrix's elements. |
	+-------------------------------------------------+--------------------------------------------+

Namespace functions
-------------------

Operators
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 40 60
	:class: code-table

	+-----------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------+
	| Name                                                                                                                    | Description                                                         |
	+=========================================================================================================================+=====================================================================+
	| :doc:`nml::mat2 operator+(nml::mat2 lhs, const nml::mat2& rhs) </nml/namespace/nml_operator_plus_mat2_mat2>`            | Return a *mat2* that is the sum between two *mat2*.                 |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::mat2 operator-(nml::mat2 lhs, const nml::mat2& rhs) </nml/namespace/nml_operator_minus_mat2_mat2>`           | Return a *mat2* that is the difference between two *mat2*.          |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::mat2 operator*(nml::mat2 lhs, const nml::mat2& rhs) </nml/namespace/nml_operator_times_mat2_mat2>`           | Return a *mat2* that is the product between two *mat2*.             |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::vec2 operator*(nml::mat2 lhs, const nml::vec2& rhs) </nml/namespace/nml_operator_times_mat2_vec2>`           | Return a *vec2* that is the product between a *mat2* and a *vec2*.  |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::mat2 operator*(nml::mat2 lhs, const float rhs) </nml/namespace/nml_operator_times_mat2_float>`               | Return a *mat2* that is the product between a *mat2* and a scalar.  |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::mat2 operator*(float lhs, const nml::mat2& rhs) </nml/namespace/nml_operator_times_float_mat2>`              | Return a *mat2* that is the product between a scalar and a *mat2*.  |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::mat2 operator/(nml::mat2 lhs, const float rhs) </nml/namespace/nml_operator_divide_mat2_float>`              | Return a *mat2* that is the quotient between a *mat2* and a scalar. |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`bool operator==(const nml::mat2& lhs, const nml::mat2& rhs) </nml/namespace/nml_operator_is_equal_mat2_mat2>`     | Return true if the two *mat2* are identical, else, return false.    |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`bool operator!=(const nml::mat2& lhs, const nml::mat2& rhs) </nml/namespace/nml_operator_is_not_equal_mat2_mat2>` | Return true if the two *mat2* are different, else, return false.    |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+

Functions
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 40 60
	:class: code-table

	+---------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------+
	| Name                                                                                        | Description                                                                                    |
	+=============================================================================================+================================================================================================+
	| :doc:`nml::mat2 transpose(const nml::mat2& mat) </nml/namespace/nml_transpose_mat2>`        | Return a *mat2* where the columns of *mat* are the rows and the rows of *mat* are the columns. |
	+---------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------+
	| :doc:`nml::mat2 inverse(const nml::mat2& mat) </nml/namespace/nml_inverse_mat2>`            | Return the inverse of a *mat2*.                                                                |
	+---------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------+
	| :doc:`std::string nml::to_string(const nml::mat2& mat) </nml/namespace/nml_to_string_mat2>` | Return a *mat2* as a string under the format "[[*x.x*, *x.y*], [*y.x*, *y.y*]]".               |
	+---------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------+