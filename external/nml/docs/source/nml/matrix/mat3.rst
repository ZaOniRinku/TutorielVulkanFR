mat3
====

Header file: ``include/mat3.h``

**mat3** is a **column-major** matrix with **3 columns** and **3 rows**.

:math:`mat3 = \begin{bmatrix} x.x & y.x & z.x \\ x.y & y.y & z.y \\ x.z & y.z & z.z \end{bmatrix}`

Class variables
---------------

.. table::
	:width: 100%
	:widths: 15 15 70
	:class: code-table

	+-------------------------------------+-------+----------------------------------+
	| Type                                | Name  | Description                      |
	+=====================================+=======+==================================+
	| :doc:`nml::vec3 </nml/vector/vec3>` | x     | The first column of the *mat3*.  |
	+-------------------------------------+-------+----------------------------------+
	| :doc:`nml::vec3 </nml/vector/vec3>` | y     | The second column of the *mat3*. |
	+-------------------------------------+-------+----------------------------------+
	| :doc:`nml::vec3 </nml/vector/vec3>` | z     | The third column of the *mat3*.  |
	+-------------------------------------+-------+----------------------------------+

Class functions
---------------

Constructors
~~~~~~~~~~~~

.. table::
	:width: 100%
	:widths: 30 70
	:class: code-table

	+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| Name                                                                                                                                                                                                | Description                                                                                                                                                                                                                               |
	+=====================================================================================================================================================================================================+===========================================================================================================================================================================================================================================+
	| :doc:`mat3() </nml/matrix/mat3/constructor>`                                                                                                                                                        | Construct a ([1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]) identity matrix.                                                                                                                                                          |
	+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`mat3(float _xxxyxzyxyyyzzxzyzz) </nml/matrix/mat3/constructor_float>`                                                                                                                         | Construct a ([*_xxxyxzyxyyyzzxzyzz*, *_xxxyxzyxyyyzzxzyzz*, *_xxxyxzyxyyyzzxzyzz*], [*_xxxyxzyxyyyzzxzyzz*, *_xxxyxzyxyyyzzxzyzz*, *_xxxyxzyxyyyzzxzyzz*], [*_xxxyxzyxyyyzzxzyzz*, *_xxxyxzyxyyyzzxzyzz*, *_xxxyxzyxyyyzzxzyzz*]) matrix. |
	+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, float _zx, float _zy, float _zz) </nml/matrix/mat3/constructor_float_float_float_float_float_float_float_float_float>` | Construct a ([*_xx*, *_xy*, *_xz*], [*_yx*, *_yy*, *_yz*], [*_zx*, *_zy*, *_zz*]) matrix.                                                                                                                                                 |
	+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, nml::vec3 _zxzyzz) </nml/matrix/mat3/constructor_float_float_float_float_float_float_vec3>`                            | Construct a ([*_xx*, *_xy*, *_xz*], [*_yx*, *_yy*, *_yz*], [*_zxzyzz.x*, *_zxzyzz.y*, *_zxzyzz.z*]) matrix.                                                                                                                               |
	+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`mat3(float _xx, float _xy, float _xz, nml::vec3 _yxyyyz, float _zx, float _zy, float _zz) </nml/matrix/mat3/constructor_float_float_float_vec3_float_float_float>`                            | Construct a ([*_xx*, *_xy*, *_xz*], [*_yxyyyz.x*, *_yxyyyz.y*, *_yxyyyz.z*], [*_zx*, *_zy*, *_zz*]) matrix.                                                                                                                               |
	+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`mat3(nml::vec3 _xxxyxz, float _yy, float _yz, float _zx, float _zy, float _zz) </nml/matrix/mat3/constructor_vec3_float_float_float_float_float_float>`                                       | Construct a ([*_xxxyxz.x*, *_xxxyxz.y*, *_xxxyxz.z*], [*_yx*, *_yy*, *_yz*], [*_zx*, *_zy*, *_zz*]) matrix.                                                                                                                               |
	+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`mat3(float _xx, float _xy, float _xz, nml::vec3 _yxyyyz, nml::vec3 _zxzyzz) </nml/matrix/mat3/constructor_float_float_float_vec3_vec3>`                                                       | Construct a ([*_xx*, *_xy*, *_xz*], [*_yxyyyz.x*, *_yxyyyz.y*, *_yxyyyz.z*], [*_zxzyzz.x*, *_zxzyzz.y*, *_zxzyzz.z*]) matrix.                                                                                                             |
	+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`mat3(nml::vec3 _xxxyxz, nml::vec3 _yxyyyz, float _zx, float _zy, float _zz) </nml/matrix/mat3/constructor_vec3_vec3_float_float_float>`                                                       | Construct a ([*_xxxyxz.x*, *_xxxyxz.y*, *_xxxyxz.z*], [*_yxyyyz.x*, *_yxyyyz.y*, *_yxyyyz.z*], [*_zx*, *_zy*, *_zz*]) matrix.                                                                                                             |
	+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`mat3(nml::vec3 _xxxyxz, float _yx, float _yy, float _yz, nml::vec3 _zxzyzz) </nml/matrix/mat3/constructor_vec3_float_float_float_vec3>`                                                       | Construct a ([*_xxxyxz.x*, *_xxxyxz.y*, *_xxxyxz.z*], [*_yx*, *_yy*, *_yz*], [*_zxzyzz.x*, *_zxzyzz.y*, *_zxzyzz.z*]) matrix.                                                                                                             |
	+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`mat3(nml::vec3 _xxxyxz, nml::vec3 _yxyyyz, nml::vec3 _zxzyzz) </nml/matrix/mat3/constructor_vec3_vec3_vec3>`                                                                                  | Construct a ([*_xxxyxz.x*, *_xxxyxz.y*, *_xxxyxz.z*], [*_yxyyyz.x*, *_yxyyyz.y*, *_yxyyyz.z*], [*_zxzyzz.x*, *_zxzyzz.y*, *_zxzyzz.z*]) matrix.                                                                                           |
	+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Operators
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 50 50
	:class: code-table

	+----------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| Name                                                                                               | Description                                                                                                                                                |
	+====================================================================================================+============================================================================================================================================================+
	| :doc:`nml::mat3& operator+=(const nml::mat3& other) </nml/matrix/mat3/operator_plus_equal_mat3>`   | Add a *mat3* to the current *mat3*.                                                                                                                        |
	+----------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::mat3& operator-=(const nml::mat3& other) </nml/matrix/mat3/operator_minus_equal_mat3>`  | Substract a *mat3* from the current *mat3*.                                                                                                                |
	+----------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::mat3& operator*=(const nlm::mat3& other) </nml/matrix/mat3/operator_times_equal_mat3>`  | Multiply the current *mat3* by a *mat3*.                                                                                                                   |
	+----------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::mat3& operator*=(const float other) </nml/matrix/mat3/operator_times_equal_float>`      | Multiply the current *mat3* by a scalar.                                                                                                                   |
	+----------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::mat3& operator/=(const float other) </nml/matrix/mat3/operator_divide_equal_float>`     | Divide the current *mat3* by a scalar.                                                                                                                     |
	+----------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nlm::vec3& operator[](size_t index) </nml/matrix/mat3/operator_brackets_ref>`                | Return a reference to *x* if index is 0, a reference to *y* if index is 1 or a reference to *z* if index is 2, else, throw an exception.                   |
	+----------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`const nlm::vec3& operator[](size_t index) const </nml/matrix/mat3/operator_brackets_value>`  | Return a const reference to *x* if index is 0, a const reference to *y* if index is 1 or a const reference to *z* if index is 2, else, throw an exception. |
	+----------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+

Functions
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 30 70
	:class: code-table

	+-------------------------------------------------+--------------------------------------------+
	| Name                                            | Description                                |
	+=================================================+============================================+
	| :doc:`float det() const </nml/matrix/mat3/det>` | Return the determinant of the matrix.      |
	+-------------------------------------------------+--------------------------------------------+
	| :doc:`float* data() </nml/matrix/mat3/data>`    | Return a pointer to the matrix's elements. |
	+-------------------------------------------------+--------------------------------------------+

Namespace functions
-------------------

Operators
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 40 60
	:class: code-table

	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| Name                                                                                                                    | Description                                                         |
	+=========================================================================================================================+=====================================================================+
	| :doc:`nml::mat3 operator+(nml::mat3 lhs, const nml::mat3& rhs) </nml/namespace/nml_operator_plus_mat3_mat3>`            | Return a *mat3* that is the sum between two *mat3*.                 |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::mat3 operator-(nml::mat3 lhs, const nml::mat3& rhs) </nml/namespace/nml_operator_minus_mat3_mat3>`           | Return a *mat3* that is the difference between two *mat3*.          |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::mat3 operator*(nml::mat3 lhs, const nml::mat3& rhs) </nml/namespace/nml_operator_times_mat3_mat3>`           | Return a *mat3* that is the product between two *mat3*.             |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::vec3 operator*(nml::mat3 lhs, const nml::vec3& rhs) </nml/namespace/nml_operator_times_mat3_vec3>`           | Return a *vec3* that is the product between a *mat3* and a *vec3*.  |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::mat3 operator*(nml::mat3 lhs, const float rhs) </nml/namespace/nml_operator_times_mat3_float>`               | Return a *mat3* that is the product between a *mat3* and a scalar.  |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::mat3 operator*(float lhs, const nml::mat3& rhs) </nml/namespace/nml_operator_times_float_mat3>`              | Return a *mat3* that is the product between a scalar and a *mat3*.  |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::mat3 operator/(nml::mat3 lhs, const float rhs) </nml/namespace/nml_operator_divide_mat3_float>`              | Return a *mat3* that is the quotient between a *mat3* and a scalar. |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`bool operator==(const nml::mat3& lhs, const nml::mat3& rhs) </nml/namespace/nml_operator_is_equal_mat3_mat3>`     | Return true if the two *mat3* are identical, else, return false.    |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`bool operator!=(const nml::mat3& lhs, const nml::mat3& rhs) </nml/namespace/nml_operator_is_not_equal_mat3_mat3>` | Return true if the two *mat3* are different, else, return false.    |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+

Functions
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 40 60
	:class: code-table

	+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
	| Name                                                                                         | Description                                                                                                           |
	+==============================================================================================+=======================================================================================================================+
	| :doc:`nml::mat3 transpose(const nml::mat3& mat) </nml/namespace/nml_transpose_mat3>`         | Return a *mat3* where the columns of *mat* are the rows and the rows of *mat* are the columns.                        |
	+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::mat3 inverse(const nml::mat3& mat) </nml/namespace/nml_inverse_mat3>`             | Return the inverse of a *mat3*.                                                                                       |
	+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::mat3 translate(const nml::vec2& translation) </nml/namespace/nml_translate_vec2>` | Return a 2D translation matrix according to the translation vector.                                                   |
	+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::mat3 rotate(const float angle) </nml/namespace/nml_rotate_float>`                 | Return a 2D rotation matrix according to the angle (in radians).                                                      |
	+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::mat3 scale(const nml::vec2& scaling) </nml/namespace/nml_scale_vec2>`             | Return a 2D scaling matrix according to the scaling factors.                                                          |
	+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
	| :doc:`std::string nml::to_string(const nml::mat3& mat) </nml/namespace/nml_to_string_mat3>`  | Return a *mat3* as a string under the format "[[*x.x*, *x.y*, *x.z*], [*y.x*, *y.y*, *y.z*], [*z.x*, *z.y*, *z.z*]]". |
	+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+