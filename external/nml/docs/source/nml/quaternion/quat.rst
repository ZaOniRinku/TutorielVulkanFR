quat
====

Header file: ``include/quat.h``

**quat** is a quaternion with **4 scalars**, **a**, **b**, **c** and **d**.

:math:`quat = a + bi + cj + dk`

Class variables
---------------

.. table::
	:width: 100%
	:widths: 15 15 70
	:class: code-table

	+-------+-------+-----------------------------------+
	| Type  | Name  | Description                       |
	+=======+=======+===================================+
	| float | a     | The first element of the *quat*.  |
	+-------+-------+-----------------------------------+
	| float | b     | The second element of the *quat*. |
	+-------+-------+-----------------------------------+
	| float | c     | The third element of the *quat*.  |
	+-------+-------+-----------------------------------+
	| float | d     | The fourth element of the *quat*. |
	+-------+-------+-----------------------------------+

Class functions
---------------

Constructors
~~~~~~~~~~~~

.. table::
	:width: 100%
	:widths: 30 70
	:class: code-table

	+----------------------------------------------------------------------------------------------------------------+-------------------------------------------------------+
	| Name                                                                                                           | Description                                           |
	+================================================================================================================+=======================================================+
	| :doc:`quat() </nml/quaternion/quat/constructor>`                                                               | Construct a (1.0, 0.0, 0.0, 0.0) identity quaternion. |
	+----------------------------------------------------------------------------------------------------------------+-------------------------------------------------------+
	| :doc:`quat(float _a, float _b, float _c, float _d) </nml/quaternion/quat/constructor_float_float_float_float>` | Construct a (*_a*, *_b*, *_c*, *_d*) quaternion.      |
	+----------------------------------------------------------------------------------------------------------------+-------------------------------------------------------+

Operators
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 50 50
	:class: code-table

	+-------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| Name                                                                                                  | Description                                                                                                                                                                |
	+=======================================================================================================+============================================================================================================================================================================+
	| :doc:`nml::quat& operator+=(const nml::quat& other) </nml/quaternion/quat/operator_plus_equal_quat>`  | Add a *quat* to the current *quat*.                                                                                                                                        |
	+-------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::quat& operator-=(const nml::quat& other) </nml/quaternion/quat/operator_minus_equal_quat>` | Substract a *quat* from the current *quat*.                                                                                                                                |
	+-------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::quat& operator*=(const nml::quat& other) </nml/quaternion/quat/operator_times_equal_quat>` | Multiply the current *quat* by a *quat*.                                                                                                                                   |
	+-------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::quat& operator*=(const float other) </nml/quaternion/quat/operator_times_equal_float>`     | Multiply the current *quat* by a scalar.                                                                                                                                   |
	+-------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::quat& operator/=(const float other) </nml/quaternion/quat/operator_divide_equal_float>`    | Divide the current *quat* by a scalar.                                                                                                                                     |
	+-------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`float& operator[](size_t index) </nml/quaternion/quat/operator_brackets_ref>`                   | Return a reference to *a* if index is 0, a reference to *b* if index is 1, a reference to *c* if index is 2 or a reference to *d* if index is 3, else, throw an exception. |
	+-------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`const float operator[](size_t index) const </nml/quaternion/quat/operator_brackets_value>`      | Return the value of *a* if index is 0, the value of *b* if index is 1, the value of *c* if index is 2 or the value of *d* if index is 3, else, throw an exception.         |
	+-------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Functions
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 30 70
	:class: code-table

	+-----------------------------------------------------+------------------------------------------------+
	| Name                                                | Description                                    |
	+=====================================================+================================================+
	| :doc:`float length() </nml/quaternion/quat/length>` | Return the length of the quaternion.           |
	+-----------------------------------------------------+------------------------------------------------+
	| :doc:`float* data() </nml/quaternion/quat/data>`    | Return a pointer to the quaternion's elements. |
	+-----------------------------------------------------+------------------------------------------------+

Namespace functions
-------------------

Operators
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 40 60
	:class: code-table

	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| Name                                                                                                                    | Description                                                         |
	+=========================================================================================================================+=====================================================================+
	| :doc:`nml::quat operator+(nml::quat lhs, const nml::quat& rhs) </nml/namespace/nml_operator_plus_quat_quat>`            | Return a *quat* that is the sum between two *quat*.                 |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::quat operator-(nml::quat lhs, const nml::quat& rhs) </nml/namespace/nml_operator_minus_quat_quat>`           | Return a *quat* that is the difference between two *quat*.          |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::quat operator*(nml::quat lhs, const float rhs) </nml/namespace/nml_operator_times_quat_float>`               | Return a *quat* that is the product between two *quat*.             |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::quat operator*(nml::quat lhs, const float rhs) </nml/namespace/nml_operator_times_quat_float>`               | Return a *quat* that is the product between a *quat* and a scalar.  |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::quat operator*(float lhs, const nml::quat& rhs) </nml/namespace/nml_operator_times_float_quat>`              | Return a *quat* that is the product between a scalar and a *quat*.  |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::quat operator/(nml::quat lhs, const float rhs) </nml/namespace/nml_operator_divide_quat_float>`              | Return a *quat* that is the quotient between a *quat* and a scalar. |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`bool operator==(const nml::quat& lhs, const nml::quat& rhs) </nml/namespace/nml_operator_is_equal_quat_quat>`     | Return true if the two *quat* are identical, else, return false.    |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`bool operator!=(const nml::quat& lhs, const nml::quat& rhs) </nml/namespace/nml_operator_is_not_equal_quat_quat>` | Return true if the two *quat* are different, else, return false.    |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+

Functions
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 40 60
	:class: code-table

	+---------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------+
	| Name                                                                                        | Description                                                                 |
	+=============================================================================================+=============================================================================+
	| :doc:`nml::quat nml::conjugate(const nml::quat& qua) </nml/namespace/nml_conjugate_quat>`   | Return the conjugate of a quaternion.                                       |
	+---------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------+
	| :doc:`nml::quat nml::normalize(const nml::quat& qua) </nml/namespace/nml_normalize_quat>`   | Return a *quat* with the same direction as *qua* but with length 1.         |
	+---------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------+
	| :doc:`nml::quat to_quat(const nml::vec3& vec) </nml/namespace/nml_to_quat_vec3>`            | Return a quaternion from euler angles in radians.                           |
	+---------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------+
	| :doc:`std::string nml::to_string(const nml::quat& qua) </nml/namespace/nml_to_string_quat>` | Return a quat as a string under the format \“*a* + *b*\i + *c*\j + *d*\k”.  |
	+---------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------+