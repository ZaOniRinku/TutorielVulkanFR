vec3
====

Header file: ``include/vec3.h``

**vec3** is a vector with **3 scalars**, **x**, **y** and **z**.

:math:`vec3 = \begin{bmatrix} x \\ y \\ z \end{bmatrix}`

Class variables
---------------

.. table::
	:width: 100%
	:widths: 15 15 70
	:class: code-table

	+-------+-------+-----------------------------------+
	| Type  | Name  | Description                       |
	+=======+=======+===================================+
	| float | x     | The first element of the *vec3*.  |
	+-------+-------+-----------------------------------+
	| float | y     | The second element of the *vec3*. |
	+-------+-------+-----------------------------------+
	| float | z     | The third element of the *vec3*.  |
	+-------+-------+-----------------------------------+

Class functions
---------------

Constructors
~~~~~~~~~~~~

.. table::
	:width: 100%
	:widths: 35 65
	:class: code-table

	+---------------------------------------------------------------------------------------------+----------------------------------------------+
	| Name                                                                                        | Description                                  |
	+=============================================================================================+==============================================+
	| :doc:`vec3() </nml/vector/vec3/constructor>`                                                | Construct a (0.0, 0.0, 0.0) vector.          |
	+---------------------------------------------------------------------------------------------+----------------------------------------------+
	| :doc:`vec3(float _xyz) </nml/vector/vec3/constructor_float>`                                | Construct a (*_xyz*, *_xyz*, *_xyz*) vector. |
	+---------------------------------------------------------------------------------------------+----------------------------------------------+
	| :doc:`vec3(float _x, float _y, float _z) </nml/vector/vec3/constructor_float_float_float>`  | Construct a (*_x*, *_y*, *_z*) vector.       |
	+---------------------------------------------------------------------------------------------+----------------------------------------------+
	| :doc:`vec3(float _x, nml::vec2 _yz) </nml/vector/vec3/constructor_float_vec2>`              | Construct a (*_x*, *_yz.x*, *_yz.y*) vector. |
	+---------------------------------------------------------------------------------------------+----------------------------------------------+
	| :doc:`vec3(nml::vec2 _xy, float _z) </nml/vector/vec3/constructor_vec2_float>`              | Construct a (*_xy.x, *_xy.y*, *_z*) vector.  |
	+---------------------------------------------------------------------------------------------+----------------------------------------------+

Operators
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 50 50
	:class: code-table

	+---------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
	| Name                                                                                              | Description                                                                                                                              |
	+===================================================================================================+==========================================================================================================================================+
	| :doc:`nml::vec3& operator+=(const nml::vec3& other) </nml/vector/vec3/operator_plus_equal_vec3>`  | Add a *vec3* to the current *vec3*.                                                                                                      |
	+---------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::vec3& operator-=(const nml::vec3& other) </nml/vector/vec3/operator_minus_equal_vec3>` | Substract a *vec3* from the current *vec3*.                                                                                              |
	+---------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::vec3& operator*=(const float other) </nml/vector/vec3/operator_times_equal_float>`     | Multiply the current *vec3* by a scalar.                                                                                                 |
	+---------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::vec3& operator/=(const float other) </nml/vector/vec3/operator_divide_equal_float>`    | Divide the current *vec3* by a scalar.                                                                                                   |
	+---------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`float& operator[](size_t index) </nml/vector/vec3/operator_brackets_ref>`                   | Return a reference to *x* if index is 0, a reference to *y* if index is 1 or a reference to *z* if index is 2, else, throw an exception. |
	+---------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`const float operator[](size_t index) const </nml/vector/vec3/operator_brackets_value>`      | Return the value of *x* if index is 0, the value of *y* if index is 1 or the value to *z* if index is 2, else, throw an exception.       |
	+---------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+

Functions
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 30 70
	:class: code-table

	+-------------------------------------------------+--------------------------------------------+
	| Name                                            | Description                                |
	+=================================================+============================================+
	| :doc:`float length() </nml/vector/vec3/length>` | Return the length of the vector.           |
	+-------------------------------------------------+--------------------------------------------+
	| :doc:`float* data() </nml/vector/vec3/data>`    | Return a pointer to the vector's elements. |
	+-------------------------------------------------+--------------------------------------------+

Namespace functions
-------------------

Operators
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 40 60
	:class: code-table

	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| Name                                                                                                                    | Description                                                         |
	+=========================================================================================================================+=====================================================================+
	| :doc:`nml::vec3 operator+(nml::vec3 lhs, const nml::vec3& rhs) </nml/namespace/nml_operator_plus_vec3_vec3>`            | Return a *vec3* that is the sum between two *vec3*.                 |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::vec3 operator-(nml::vec3 lhs, const nml::vec3& rhs) </nml/namespace/nml_operator_minus_vec3_vec3>`           | Return a *vec3* that is the difference between two *vec3*.          |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::vec3 operator*(nml::vec3 lhs, const float rhs) </nml/namespace/nml_operator_times_vec3_float>`               | Return a *vec3* that is the product between a *vec3* and a scalar.  |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::vec3 operator*(float lhs, const nml::vec3& rhs) </nml/namespace/nml_operator_times_float_vec3>`              | Return a *vec3* that is the product between a scalar and a *vec3*.  |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::vec3 operator/(nml::vec3 lhs, const float rhs) </nml/namespace/nml_operator_divide_vec3_float>`              | Return a *vec3* that is the quotient between a *vec3* and a scalar. |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`bool operator==(const nml::vec3& lhs, const nml::vec3& rhs) </nml/namespace/nml_operator_is_equal_vec3_vec3>`     | Return true if the two *vec3* are identical, else, return false.    |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`bool operator!=(const nml::vec3& lhs, const nml::vec3& rhs) </nml/namespace/nml_operator_is_not_equal_vec3_vec3>` | Return true if the two *vec3* are different, else, return false.    |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+

Functions
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 40 60
	:class: code-table

	+-------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
	| Name                                                                                                                          | Description                                                                                                                                            |
	+===============================================================================================================================+========================================================================================================================================================+
	| :doc:`nml::vec3 nml::normalize(const nml::vec3& vec) </nml/namespace/nml_normalize_vec3>`                                     | Return a *vec3* with the same direction as *vec* but with length 1.                                                                                    |
	+-------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`float nml::dot(const nml::vec3& a, const nml::vec3& b) </nml/namespace/nml_dot_vec3_vec3>`                              | Return the dot product between two *vec3*.                                                                                                             |
	+-------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::vec3 nml::cross(const nml::vec3& a, const nml::vec3& b) </nml/namespace/nml_cross_vec3_vec3>`                      | Return the cross product between two *vec3*.                                                                                                           |
	+-------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::vec3 nml::reflect(const nml::vec3& i, const nml::vec3& n) </nml/namespace/nml_reflect_vec3_vec3>`                  | Return the reflected direction between the incident vector *i* and the normal *n*. *n* should be normalized.                                           |
	+-------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::vec3 nml::refract(const nml::vec3& i, const nml::vec3& n, float ior) </nml/namespace/nml_refract_vec3_vec3_float>` | Return the refracted direction between the incident vector *i*, the normal *n* and the ratio of indices of refraction *ior*. *n* should be normalized. |
	+-------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::vec3 nml::to_vec3(const nml::quat& qua) </nml/namespace/nml_to_vec3_quat>`                                         | Return a *vec3* representing euler angles in radians from a quaternion.                                                                                |
	+-------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`std::string nml::to_string(const nml::vec3& vec) </nml/namespace/nml_to_string_vec3>`                                   | Return a *vec3* as a string under the format "[*x*, *y*, *z*]".                                                                                        |
	+-------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+