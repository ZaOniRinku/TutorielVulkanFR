vec4
====

Header file: ``include/vec4.h``

**vec4** is a vector with **4 scalars**, **x**, **y**, **z** and **w**.

:math:`vec4 = \begin{bmatrix} x \\ y \\ z \\ w \end{bmatrix}`

Class variables
---------------

.. table::
	:width: 100%
	:widths: 15 15 70
	:class: code-table

	+-------+-------+-----------------------------------+
	| Type  | Name  | Description                       |
	+=======+=======+===================================+
	| float | x     | The first element of the *vec4*.  |
	+-------+-------+-----------------------------------+
	| float | y     | The second element of the *vec4*. |
	+-------+-------+-----------------------------------+
	| float | z     | The third element of the *vec4*.  |
	+-------+-------+-----------------------------------+
	| float | w     | The fourth element of the *vec4*. |
	+-------+-------+-----------------------------------+

Class functions
---------------

Constructors
~~~~~~~~~~~~

.. table::
	:width: 100%
	:widths: 30 70
	:class: code-table

	+------------------------------------------------------------------------------------------------------------+----------------------------------------------------------+
	| Name                                                                                                       | Description                                              |
	+============================================================================================================+==========================================================+
	| :doc:`vec4() </nml/vector/vec4/constructor>`                                                               | Construct a (0.0, 0.0, 0.0, 0.0) vector.                 |
	+------------------------------------------------------------------------------------------------------------+----------------------------------------------------------+
	| :doc:`vec4(float _xyzw) </nml/vector/vec4/constructor_float>`                                              | Construct a (*_xyzw*, *_xyzw*, *_xyzw*, *_xyzw*) vector. |
	+------------------------------------------------------------------------------------------------------------+----------------------------------------------------------+
	| :doc:`vec4(float _x, float _y, float _z, float _w) </nml/vector/vec4/constructor_float_float_float_float>` | Construct a (*_x*, *_y*, *_z*, *_w*) vector.             |
	+------------------------------------------------------------------------------------------------------------+----------------------------------------------------------+
	| :doc:`vec4(float _x, nlm::vec3 _yzw) </nml/vector/vec4/constructor_float_vec3>`                            | Construct a (*_x*, *_yzw.x*, *_yzw.y*, *_yzw.z*) vector. |
	+------------------------------------------------------------------------------------------------------------+----------------------------------------------------------+
	| :doc:`vec4(nlm::vec3 _xyz, float _w) </nml/vector/vec4/constructor_vec3_float>`                            | Construct a (*_xyz.x*, *_xyz.y*, *_xyz.z*, *_w*) vector. |
	+------------------------------------------------------------------------------------------------------------+----------------------------------------------------------+
	| :doc:`vec4(float _x, float _y, nlm::vec2 _zw) </nml/vector/vec4/constructor_float_float_vec2>`             | Construct a (*_x*, *_y*, *_zw.x*, *_zw.y*) vector.       |
	+------------------------------------------------------------------------------------------------------------+----------------------------------------------------------+
	| :doc:`vec4(float _x, nlm::vec2 _yz, float _w) </nml/vector/vec4/constructor_float_vec2_float>`             | Construct a (*_x*, *_yz.x*, *_yz.y*, *_w*) vector.       |
	+------------------------------------------------------------------------------------------------------------+----------------------------------------------------------+
	| :doc:`vec4(nlm::vec2 _xy, float _z, float _w) </nml/vector/vec4/constructor_vec2_float_float>`             | Construct a (*_xy.x*, *_xy.y*, *_z*, *_w*) vector.       |
	+------------------------------------------------------------------------------------------------------------+----------------------------------------------------------+
	| :doc:`vec4(nlm::vec2 _xy, nlm::vec2 _zw) </nml/vector/vec4/constructor_vec2_vec2>`                         | Construct a (*_xy.x*, *_xy.y*, *_zw.x*, *_zw.y*) vector. |
	+------------------------------------------------------------------------------------------------------------+----------------------------------------------------------+

Operators
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 50 50
	:class: code-table

	+---------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| Name                                                                                              | Description                                                                                                                                                                |
	+===================================================================================================+============================================================================================================================================================================+
	| :doc:`nml::vec4& operator+=(const nml::vec4& other) </nml/vector/vec4/operator_plus_equal_vec4>`  | Add a *vec4* to the current *vec4*.                                                                                                                                        |
	+---------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::vec4& operator-=(const nml::vec4& other) </nml/vector/vec4/operator_minus_equal_vec4>` | Substract a *vec4* from the current *vec4*.                                                                                                                                |
	+---------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::vec4& operator*=(const float other) </nml/vector/vec4/operator_times_equal_float>`     | Multiply the current *vec4* by a scalar.                                                                                                                                   |
	+---------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::vec4& operator/=(const float other) </nml/vector/vec4/operator_divide_equal_float>`    | Divide the current *vec4* by a scalar.                                                                                                                                     |
	+---------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`float& operator[](size_t index) </nml/vector/vec4/operator_brackets_ref>`                   | Return a reference to *x* if index is 0, a reference to *y* if index is 1, a reference to *z* if index is 2 or a reference to *w* if index is 3, else, throw an exception. |
	+---------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`const float operator[](size_t index) const </nml/vector/vec4/operator_brackets_value>`      | Return the value of *x* if index is 0, the value of *y* if index is 1, the value of *z* if index is 2 or the value of *w* if index is 3, else, throw an exception.         |
	+---------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Functions
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 30 70
	:class: code-table

	+-------------------------------------------------+--------------------------------------------+
	| Name                                            | Description                                |
	+=================================================+============================================+
	| :doc:`float length() </nml/vector/vec4/length>` | Return the length of the vector.           |
	+-------------------------------------------------+--------------------------------------------+
	| :doc:`float* data() </nml/vector/vec4/data>`    | Return a pointer to the vector's elements. |
	+-------------------------------------------------+--------------------------------------------+

Namespace functions
-------------------

Operators
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 40 60
	:class: code-table

	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| Name                                                                                                                    | Description                                                         |
	+=========================================================================================================================+=====================================================================+
	| :doc:`nml::vec4 operator+(nml::vec4 lhs, const nml::vec4& rhs) </nml/namespace/nml_operator_plus_vec4_vec4>`            | Return a *vec4* that is the sum between two *vec4*.                 |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::vec4 operator-(nml::vec4 lhs, const nml::vec4& rhs) </nml/namespace/nml_operator_minus_vec4_vec4>`           | Return a *vec4* that is the difference between two *vec4*.          |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::vec4 operator*(nml::vec4 lhs, const float rhs) </nml/namespace/nml_operator_times_vec4_float>`               | Return a *vec4* that is the product between a *vec4* and a scalar.  |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::vec4 operator*(float lhs, const nml::vec4& rhs) </nml/namespace/nml_operator_times_float_vec4>`              | Return a *vec4* that is the product between a scalar and a *vec4*.  |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`nml::vec4 operator/(nml::vec4 lhs, const float rhs) </nml/namespace/nml_operator_divide_vec4_float>`              | Return a *vec4* that is the quotient between a *vec4* and a scalar. |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`bool operator==(const nml::vec4& lhs, const nml::vec4& rhs) </nml/namespace/nml_operator_is_equal_vec4_vec4>`     | Return true if the two *vec4* are identical, else, return false.    |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+
	| :doc:`bool operator!=(const nml::vec4& lhs, const nml::vec4& rhs) </nml/namespace/nml_operator_is_not_equal_vec4_vec4>` | Return true if the two *vec4* are different, else, return false.    |
	+-------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------+

Functions
~~~~~~~~~

.. table::
	:width: 100%
	:widths: 40 60
	:class: code-table

	+-------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
	| Name                                                                                                                          | Description                                                                                                                                            |
	+===============================================================================================================================+========================================================================================================================================================+
	| :doc:`nml::vec4 nml::normalize(const nml::vec4& vec) </nml/namespace/nml_normalize_vec4>`                                     | Return a *vec4* with the same direction as *vec* but with length 1.                                                                                    |
	+-------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`float nml::dot(const nml::vec4& a, const nml::vec4& b) </nml/namespace/nml_dot_vec4_vec4>`                              | Return the dot product between two *vec4*.                                                                                                             |
	+-------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::vec4 nml::reflect(const nml::vec4& i, const nml::vec4& n) </nml/namespace/nml_reflect_vec4_vec4>`                  | Return the reflected direction between the incident vector *i* and the normal *n*. *n* should be normalized.                                           |
	+-------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`nml::vec4 nml::refract(const nml::vec4& i, const nml::vec4& n, float ior) </nml/namespace/nml_refract_vec4_vec4_float>` | Return the refracted direction between the incident vector *i*, the normal *n* and the ratio of indices of refraction *ior*. *n* should be normalized. |
	+-------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
	| :doc:`std::string nml::to_string(const nml::vec4& vec) </nml/namespace/nml_to_string_vec4>`                                   | Return a *vec4* as a string under the format "[*x*, *y*, *z*, *w*]".                                                                                   |
	+-------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+